load_module modules/ngx_http_datadog_module.so;

events {
    worker_connections  1024;
}

error_log stderr info;

http {
    # We `add_header` enough (implicitly) that nginx complains that it can't optimize
    # headers using hashes:
    #
    #     nginx: [warn] could not build optimal proxy_headers_hash, you should
    #         increase either proxy_headers_hash_max_size: 512 or
    #         proxy_headers_hash_bucket_size: 64; ignoring
    #         proxy_headers_hash_bucket_size
    #
    # So, the following directive allows more space for the hashing.
    # TODO: Inject this, but when?
    # TODO proxy_headers_hash_bucket_size 128;

    # opentracing on;
    # opentracing_tag http_user_agent $http_user_agent;
    # opentracing_operation_name "$request_method $uri";
    # opentracing_trace_locations off;

    access_log /var/log/nginx/access.log;
    log_format nonsense "I am a fish, feel my wrath!";

    # log_format with_trace_id '$remote_addr - $http_x_forwarded_user [$time_local] "$request" '
    #     '$status $body_bytes_sent "$http_referer" '
    #     '"$http_user_agent" "$http_x_forwarded_for" '
    #     '"$datadog_trace_id" "$datadog_span_id"';

    datadog {
      "service": "super-duper-nginx"
      ,"operation_name_override": "nginx.handle"
      ,"agent_host": "dd-agent"
      ,"agent_port": 8126
      # ,"sampling_rules": []
    }

    # TODO: was playing with an escalation
    # proxy_cache_path /tmp/my_cache levels=1:2 keys_zone=my_cache:10m;

    server {
        listen       80;

        # set $thingy 0;
        # access_log /var/log/nginx/access.log with_trace_id if=$thingy;
        # access_log /var/log/nginx/access.log datadog_json;
        # access_log /var/log/nginx/access.log;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            # datadog_disable;
            datadog_tag "custom-tag" "special value";
        }

        location /test {
            alias /usr/share/nginx/html/index.html;
        }

        location /http {
            # opentracing off;
            if ($http_user_agent = "curl/7.64.1") {
                datadog_disable;
            }
            proxy_pass http://http:8080;
            
            # TODO: was playing with an escalation
            # proxy_cache my_cache;
            # Key is the same for all requests, so it should be in cache after first request.
            # proxy_cache_key "foo";
             #proxy_cache_valid 10m;
            
            add_header X-Cool-Stuff "$datadog_trace_id";
            
            # access_log /var/log/nginx/access.log nonsense;
        }

        location /fastcgi {
            fastcgi_pass fastcgi:8080;
            opentracing_operation_name "foobar";
        }
    }

    # gRPC uses HTTP/2, and nginx doesn't allow HTTP/1 and HTTP/2 in the same
    # server block.  So, here's another server block.
    server {
        listen 1337;

        location /helloworld.Greeter {
            grpc_pass grpc://grpc:8080;
        }
    }
}
